# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  # trivyVersion: 0.37.1
  tag: '$(Build.BuildNumber)'
  imageName: 'alienke/pygoat'

pool:
  vmImage: ubuntu-latest

# steps:
# - task: Docker@0
#   displayName: 'Build an image'
#   inputs:
#     containerregistrytype: 'Container Registry'
#     dockerRegistryConnection: 'Docker-alienke'

# - script: |
#     echo  Build container
#     # docker run --rm -v $(pwd):/src hysnsec/safety check -r /src/requirements.txt
#     docker build -t alienke/$(Build.BuildId) .
#   displayName: 'Building image'
#   continueOnError: true

# - task: trivy@1
#   inputs:
#     version: 'latest'
#     image: 'alienke/$(Build.BuildId)'
#     severities: 'CRITICAL,HIGH'
#     ignoreUnfixed: true
#   displayName: 'Container-scanning'
#   continueOnError: true


  
stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        export DOCKLE_HOST="unix:///var/run/docker.sock"
      displayName: Setting up docker env
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'Docker-alienke'
        repository: '$(imageName)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/'
        tags: '$(tag)'
  - job: Scan
    dependsOn:
    - Build
    condition: failed()
    displayName: Static scans
    pool:
      vmImage: 'ubuntu-latest'
    steps:  
    - script: |
          echo Running IaC.
          docker run --rm -w /src -v $(pwd):/src bridgecrew/checkov -d /src
      displayName: 'IaC - checkov'
      continueOnError: true

    - script: |
        echo Running SAST.
        docker run --user $(id -u):$(id -g) -v $(pwd):/src --rm hysnsec/bandit -r /src
      displayName: 'SAST - Bandit'
      continueOnError: true

    - script: |
        echo Running SAST.
        docker run --rm -e SNYK_TOKEN=$(SNYK_TOKEN) -v "$(pwd):/project" snyk/snyk-cli:docker code test --severity-threshold=high
      displayName: 'SAST - SNYK'
      continueOnError: true
    
    - task: CmdLine@2
      displayName: Container scanning
      inputs:
        script: |
         # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy image --severity MEDIUM,HIGH --ignore-unfixed $(imageName):$(tag)
         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed $(imageName):$(tag)
      continueOnError: true
    
    - script: echo Running dependency-check.
        docker run --rm -v $(pwd):/src hysnsec/safety check -r /src/requirements.txt
      displayName: 'Dependency-check'
      continueOnError: true

  - job: Push
    dependsOn: 
    - Scan
    - Build
    condition: succeeded()
    displayName: Push Image
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: 'Docker-alienke'
        repository: '$(imageName)'
        command: 'push'
        tags: '$(tag)'
      
      